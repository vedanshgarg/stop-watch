{"version":3,"sources":["components/Display/Display.js","components/WebWorkerDemo/WebWorkerDemo.js","components/WebWorker/WebWorker.js","utils/incrementWorker.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","className","minZero","timeInMinutes","secZero","timeInSeconds","deciSecZero","timeInDeciSeconds","WebWorkerDemo","worker","useState","score","setScore","useEffect","addEventListener","event","data","onClick","toAdd","i","j","postMessage","WebWorker","code","toString","blob","Blob","Worker","URL","createObjectURL","self","e","App","state","timerRunning","initiateReset","timerInterval","incrementWorker","showZero","currValue","startTimer","setInterval","setState","pauseTimer","clearInterval","resetTimer","showStartPause","runStartPause","x","console","log","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af4ad55d.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./styles.css\"\n\nconst Display = props => {\n    return (\n        <div className=\"display\">\n            {props.minZero}{props.timeInMinutes}:\n            {props.secZero}{props.timeInSeconds}:\n            {props.deciSecZero}{props.timeInDeciSeconds}\n        </div>\n    )\n};\n\nexport default Display;","import React, { useEffect, useState } from \"react\";\n\nimport \"./styles.css\";\n\nconst WebWorkerDemo = ({ worker }) => {\n  const [score, setScore] = useState(0);\n\n  useEffect(() => {\n    worker.addEventListener(\"message\", (event) => {\n      setScore(event.data);\n    });\n  }, []);\n\n  const incrementWithoutWorker = () => {\n    let toAdd = 0;\n    for (let i = 0; i < 10000; i++) {\n      for (let j = 0; j < 100000; j++) {\n        toAdd++;\n      }\n    }\n    setScore((score) => score + toAdd);\n  };\n\n  const incrementWithWorker = () => {\n    worker.postMessage(score);\n  };\n\n  return (\n    <div className=\"web-worker-demo\">\n      <div className=\"score\">{score}</div>\n      <div className=\"demo-buttons\">\n        <button onClick={incrementWithoutWorker}>Add using Main thread</button>\n        <button onClick={incrementWithWorker}>\n          Add using WebWorker thread\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default WebWorkerDemo;\n","export default class WebWorker {\n  constructor(worker) {\n    const code = worker.toString();\n    const blob = new Blob([\"(\" + code + \")()\"]);\n    return new Worker(URL.createObjectURL(blob));\n  }\n}\n","export default () => {\n  // eslint-disable-next-line no-restricted-globals\n  self.addEventListener(\"message\", (e) => {\n    if (!e) return;\n    let score = e.data;\n    let toAdd = 0;\n    for (let i = 0; i < 10000; i++) {\n      for (let j = 0; j < 100000; j++) {\n        toAdd++;\n      }\n    }\n    postMessage(score + toAdd);\n  });\n};\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Display from \"./components/Display/Display\";\nimport WebWorkerDemo from \"./components/WebWorkerDemo/WebWorkerDemo\";\nimport WebWorker from \"./components/WebWorker/WebWorker\";\nimport incrementWorker from \"./utils/incrementWorker\";\n\nclass App extends React.Component {\n  state = {\n    timeInDeciSeconds: 0,\n    timeInSeconds: 0,\n    timeInMinutes: 0,\n    timerRunning: false,\n    initiateReset: false,\n    timerInterval: 0,\n  };\n  worker = new WebWorker(incrementWorker);\n\n  showZero = (currValue) => {\n    if (currValue < 10) {\n      return \"0\";\n    } else {\n      return \"\";\n    }\n  };\n\n  startTimer = () => {\n    let timerInterval = setInterval(() => {\n      this.setState(\n        {\n          timeInDeciSeconds: this.state.timeInDeciSeconds + 1,\n        },\n        () => {\n          if (this.state.timeInSeconds > 59) {\n            this.setState({\n              timeInDeciSeconds: 0,\n              timeInSeconds: 0,\n              timeInMinutes: this.state.timeInMinutes + 1,\n            });\n          }\n          if (this.state.timeInDeciSeconds > 99) {\n            this.setState({\n              timeInDeciSeconds: 0,\n              timeInSeconds: this.state.timeInSeconds + 1,\n            });\n          }\n        }\n      );\n    }, 10);\n\n    this.setState({\n      timerRunning: true,\n    });\n    return timerInterval;\n  };\n\n  pauseTimer = () => {\n    clearInterval(this.state.timerInterval);\n    this.setState({\n      timerRunning: false,\n    });\n  };\n\n  resetTimer = () => {\n    this.pauseTimer();\n    this.setState({\n      timeInDeciSeconds: 0,\n      timeInSeconds: 0,\n      timeInMinutes: 0,\n    });\n  };\n\n  showStartPause = () => {\n    if (this.state.timerRunning) {\n      return \"Pause\";\n    } else {\n      return \"Start\";\n    }\n  };\n\n  runStartPause = () => {\n    if (this.state.timerRunning) {\n      this.pauseTimer();\n    } else {\n      this.setState({\n        timerInterval: this.startTimer(),\n      });\n    }\n  };\n\n  componentDidMount() {\n    let x = 0;\n    setInterval(() => {\n      console.log(x++);\n    }, 500);\n  }\n\n  render() {\n    return (\n      <div className=\"app-main\">\n        <Display\n          minZero={this.showZero(this.state.timeInMinutes)}\n          secZero={this.showZero(this.state.timeInSeconds)}\n          deciSecZero={this.showZero(this.state.timeInDeciSeconds)}\n          timeInMinutes={this.state.timeInMinutes}\n          timeInSeconds={this.state.timeInSeconds}\n          timeInDeciSeconds={this.state.timeInDeciSeconds}\n        />\n        <div>\n          <button onClick={this.runStartPause}>{this.showStartPause()}</button>\n          <button onClick={this.resetTimer}> Reset</button>\n        </div>\n        <WebWorkerDemo worker={this.worker} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}